''' =========================================================================================== '''
# BlueHat Flask Views
''' =========================================================================================== '''
# Imports
from app import app, models, socketio, login_manager
from app.models import *
from app import db
from env import *
from flask import render_template, redirect, url_for, request, abort
from flask import jsonify, session, g, make_response
from flask_socketio import SocketIO, Namespace, send, emit, disconnect
from datetime import datetime
from datetime import timedelta
from functools import update_wrapper
import requests
import json
from sqlalchemy import *
from sqlalchemy.sql import func
from passlib.hash import sha256_crypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

''' =========================================================================================== '''
# BlueHat Web Routes

login_manager.login_view = "index_view"


@login_manager.user_loader
def load_user(user_email):
    return Users.query.filter_by(email=user_email).first()

'''
Description: Render the index page here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/', methods=['GET'])
def index_view():
    return render_template('/home/index.html')

'''
Description: User registration
Input: Username, first name, last name, password, email
Return Type: HTML, 200 for success otherwise failure
'''
@app.route('/register', methods=['GET', 'POST'])
def register_user():
    username = request.form['username']
    firstName = request.form['firstName']
    lastName = request.form['lastName']
    email = request.form['email']
    password = sha256_crypt.hash(request.form['password'])
    registered = datetime.now()
    authenticated = True
    admin = False

    availableName = Users.query.filter_by(username=username).first()
    if availableName is None:
        user = Users(email, username, password, firstName, lastName, registered, authenticated, admin)
        db.session.add(user)
        db.session.commit()
        session['user'] = dict(email=email, id=None, admin=user.admin)
        login_user(user, remember=True)
        return redirect(url_for('dashboard_view'))
    else:
        return error_401(errCode="1", msg="Username already exists")

'''
Description: Post being sent from client side for login verification
Input: Username and password
Return Type: HTML, 200 for success otherwise failure
'''
@app.route('/login', methods=['GET', 'POST'])
def login():
    userByUsername = Users.query.filter_by(username=request.form['id']).first()
    userByEmail = Users.query.filter_by(email=request.form['id']).first()
    if userByUsername is not None:
        if sha256_crypt.verify(request.form['password'], userByUsername.password):
            session['user'] = dict(email=userByUsername.email, profile_url=None, id=None, access_token=None, admin=userByUsername.admin)
            userByUsername.authenticated = True
            db.session.add(userByUsername)
            db.session.commit()
            session['user'] = dict(email=userByUsername.email, id=None, admin=userByUsername.admin)
            login_user(userByUsername, remember=True)
            return redirect(url_for('dashboard_view'))
        else:
            return error_401(errCode="2", msg="Login failed")
    if userByEmail is not None:
        if sha256_crypt.verify(request.form['password'], userByEmail.password):
            session['user'] = dict(email=userByEmail.email, profile_url=None, id=None, access_token=None, admin=userByEmail.admin)
            userByEmail.authenticated = True
            db.session.add(userByEmail)
            db.session.commit()
            session['user'] = dict(type='fitquest', email=email, id=None, admin=userByEmail.admin)
            login_user(userByEmail, remember=True)
            return redirect(url_for('dashboard_view'))
        else:
            return error_401(errCode="2", msg="Login failed")
    return  error_401(errCode="2", msg="Login failed")

'''
Description: Render the dashboard page view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard', methods=['GET', 'POST'])
@login_required
def dashboard_view():
    if session['user']['admin'] == True:
        admin = 1
    else:
        admin = 0
    return render_template('/home/dashboard.html', admin = admin)

'''
Description: SocketIO connect event method for all clients
Input: None
Return Type: Prints statement on server side when client connects
'''
@socketio.on('connect', namespace='/observer')
def observer_socketio_connect():
    print('BlueHat Observer Device connected!')

'''
Description: Render the dashboard home page view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard/home', methods=['GET', 'POST'])
@login_required
def dashboard_home_view():
    return render_template('/home/dashboard_home.html')

'''
Description: Render the dashboard profile page view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard/profile', methods=['GET', 'POST'])
@login_required
def dashboard_profile_view():
    return render_template('/home/dashboard_profile.html')

'''
Description: Render the dashboard observers page view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard/observers', methods=['GET', 'POST'])
@login_required
def dashboard_observers_view():
    return render_template('/home/dashboard_observers.html')

'''
Description: Render the dashboard advertisers page view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard/advertisers', methods=['GET', 'POST'])
@login_required
def dashboard_advertisers_view():
    return render_template('/home/dashboard_advertisers.html')

'''
Description: Render the dashboard settings page view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard/settings', methods=['GET', 'POST'])
@login_required
def dashboard_settings_view():
    return render_template('/home/dashboard_settings.html')

'''
Description: Render the dashboard analytics page view from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/dashboard/analytics', methods=['GET', 'POST'])
@login_required
def dashboard_analytics_view():
    return render_template('/home/dashboard_analytics.html')

'''
Description: Pops user from the session, logging them out
Input: None
Return Type: Redirects user to login page
'''
@app.route('/logout')
@login_required
def dropsession():
    user = current_user
    user.authenticated = False
    db.session.add(user)
    db.session.commit()
    logout_user()
    return redirect(url_for('index'))

'''
Description: 404 Error handling
Input: None
Return Type: Error message
'''
@app.errorhandler(404)
def error_404(error=None):
    message = {
        'status': 404,
    }
    resp = jsonify(message)
    resp.status_code = 404
    return resp

'''
Description: 401 Error handling
Input: None
Return Type: Error message
'''
@app.errorhandler(401)
def error_401(errCode, msg):
    message = {
        'status': 401,
        'errCode': errCode,
        'reason': msg
    }
    resp = jsonify(message)
    resp.status_code = 401
    return resp

'''
Description: SocketIO discconect event method for any client
Input: None
Return Type: Prints statement on server side when client disconnects
'''
@socketio.on('disconnect', namespace='/observer')
def socketio_disconnect():
    print('BlueHat Observer Device disconnected!')

'''
Description: SocketIO event method that handles messages sent BlueHat Observer devices
Input: None
Return Type: None
'''
@socketio.on('observer_json_msg', namespace='/observer')
def handleObserverMessage(json_data):
    print json_data
    emit('on_server_response', json_data)
