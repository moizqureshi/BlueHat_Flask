''' =========================================================================================== '''
# BlueHat Flask views.py

from flask import render_template, redirect, url_for, request, abort
from flask import jsonify, session, g, make_response
from flask_socketio import SocketIO, Namespace, send, emit, disconnect
from datetime import datetime
from datetime import timedelta

# Local Imports
from app import app, socketio
from app import models
from app.models import *
from app import db
from env import *

# Third-party Imports
from functools import update_wrapper
from sqlalchemy import *
from sqlalchemy.sql import func
from passlib.hash import sha256_crypt
import requests
import json

''' =========================================================================================== '''
# BlueHat Web Routes

'''
Description: Render the index page here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/', methods=['GET'])
def index_view():
    return render_template('/home/index.html')


'''
Description: SocketIO connect event method for all clients
Input: None
Return Type: Prints statement on server side when client connects
'''
@socketio.on('connect')
def socketio_connect():
    emit('bluehat_server_response', {'data': 'BlueHat Server: You are connected'})
    print('BlueHat Client device connected!')

'''
Description: SocketIO connect event method for BlueHat Observer Devices
Input: None
Return Type: Prints statement on server side when client disconnects
'''
@socketio.on('observer_connect')
def bluehatObserver_socketio_connect():
    emit('bluehat_server_response', {'data': 'BlueHat Server: You are connected'})
    print('BlueHat Observer device connected!')


'''
Description: SocketIO discconect event method for any client
Input: None
Return Type: Prints statement on server side when client disconnects
'''
@socketio.on('disconnect')
def socketio_disconnect():
    print('BlueHat Client disconnected!')

'''
Description: SocketIO event method that handles messages sent BlueHat Observer devices
Input: None
Return Type: None
'''
@socketio.on('observer_json_msg')
def handleObserverMessage(json_data):
    print json_data
    emit('bluehat_server_response', json_data)
